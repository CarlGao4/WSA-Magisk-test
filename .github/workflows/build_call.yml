name: Build WSA Magisk (funtion)
on:
  workflow_call:
    inputs:
      arch:
        type: string
        description: Architecture of WSA.
        required: false
        # options: [x64, arm64]
        default: x64
      release-type:
        type: string
        description: Release type of WSA. RP = Release Preview; WIS = Insider Slow; WIF = Insider Fast
        required: false
        # options: ["retail","RP","WIS","WIF"]
        default: "retail"
      magisk-ver:
        type: string
        description: Magisk version.
        required: false
        # options: ["stable","beta","canary","debug"]
        default: "stable"
      gapps-brand:
        type: string
        description: GApps brand. none for no integration of GApps
        required: false
        # options: ["OpenGApps","MindTheGapps","none"]
        default: "MindTheGapps"
      gapps-variant:
        type: string
        description: GApps variant.
        required: false
        # options: ["super","stock","full","mini","micro","nano","pico","tvstock","tvmini"]
        default: "pico"
      root-sol:
        type: string
        description: Root solution. none means no root.
        required: false
        # options: ["magisk","none"]
        default: "magisk"
      compress-format:
        type: string
        description: Compress format.
        required: false
        # options: ["zip","7z"]
        default: "7z"
      release:
        type: boolean
        description: Whether to release artifacts.
        required: false
        default: false

jobs:
  build:
    name: Build WSA
    runs-on: ubuntu-latest

    outputs:
      zipname: ${{ steps.wsa.outputs.artifact }}
      date: ${{ steps.date.outputs.date }}
      rand: ${{ steps.rand.outputs.rand }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate random index
        id: rand
        run: echo "rand=$RANDOM" >> "$GITHUB_OUTPUT"

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y whiptail lzip patchelf e2fsprogs python3-pip p7zip-full attr qemu-utils unzip sudo
          python3 -m pip install -r scripts/requirements.txt -q

      - name: Grant executable permission
        run: chmod +x ./scripts/build.sh

      - name: Build WSA GAPPS ${{ inputs.arch }}
        id: wsa
        run: ./scripts/build.sh --arch ${{ inputs.arch }} --release-type ${{ inputs.release-type }} --magisk-ver ${{ inputs.magisk-ver }} --gapps-brand ${{ inputs.gapps-brand }} --gapps-variant ${{ inputs.gapps-variant }} --root-sol ${{ inputs.root-sol }} --compress-format ${{ inputs.compress-format }}

      - name: Pass to Windows
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.wsa.outputs.artifact }}-${{ steps.rand.outputs.rand }}.${{ inputs.compress-format }}
          path: ./output/${{ steps.wsa.outputs.artifact }}.${{ inputs.compress-format }}

      - name: Prepare release tag
        id: date
        run: echo "date=$(date +'v%Y-%m-%d')" >> "$GITHUB_OUTPUT"

  compress-vhdx:
    name: Compress to VHDX
    runs-on: windows-2022
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download raw zip
        uses: actions/download-artifact@v3
        with:
          path: ./output/${{ needs.build.outputs.zipname }}
          name: ${{ needs.build.outputs.zipname }}-${{ needs.build.outputs.rand }}.${{ inputs.compress-format }}

      - name: Convert to VHDX
        id: convert
        run: .\zip2vhdx\convert
        shell: pwsh

      - name: Remove unused artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ needs.build.outputs.zipname }}-${{ needs.build.outputs.rand }}.${{ inputs.compress-format }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.convert.outputs.artifact_name }}
          path: ${{ steps.convert.outputs.artifact_path }}

      - name: Upload build to release
        uses: svenstaro/upload-release-action@v2
        if: ${{ inputs.release }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.convert.outputs.artifact_path }}
          tag: ${{ needs.build.outputs.date }}
          overwrite: true
          file_glob: true
